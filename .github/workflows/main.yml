name: CI

on: [push, pull_request, workflow_dispatch]

jobs:
  build-and-test:
    strategy:
      matrix:
        ARCH: [x86_64, i386]
      fail-fast: false

    name: ${{ matrix.ARCH }}
    runs-on: ubuntu-latest

    # running in a container using a standard image instead of the GitHub worker environment makes sure the process is reproducible elsewhere
    # latest = latest LTS
    container: ubuntu:latest

    env:
      ARCH: ${{ matrix.ARCH }}
      BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
      DEBIAN_FRONTEND: interactive
      APPIMAGE_EXTRACT_AND_RUN: 1

    steps:
      - name: Install dependencies (x86_64)
        if: matrix.ARCH == 'x86_64'
        run: |
          apt-get update
          apt-get install -y build-essential cmake git gcovr patchelf wget \
            libmagic-dev libjpeg-dev libpng-dev libboost-filesystem-dev libboost-regex-dev \
            cimg-dev qt5-default qtdeclarative5-dev-tools nlohmann-json3-dev \
            qml-module-qtquick2 qtdeclarative5-dev patchelf wget

      - name: Install dependencies (i386)
        if: matrix.ARCH == 'i386'
        run: |
          dpkg --add-architecture i386
          apt-get update
          apt-get install -y build-essential cmake git gcovr patchelf wget gcc-multilib g++-multilib \
            libmagic-dev:i386 libjpeg-dev:i386 libpng-dev:i386 libboost-filesystem-dev:i386 libboost-regex-dev:i386 \
            cimg-dev qt5-default:i386 qtdeclarative5-dev-tools:i386 nlohmann-json3-dev \
            qt5-default:i386 qtdeclarative5-dev-tools:i386 libfuse2:i386

      # check out once git command is available
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build AppImage
        run: bash ci/build.sh

      - name: Test AppImage
        #if: matrix.ARCH != 'i386'
        if: false
        run: |
          env CI=1 bash ci/test.sh linuxdeploy-plugin-qt-"$ARCH".AppImage

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: AppImage
          path: linuxdeploy-plugin-qt-"$ARCH".AppImage*

  upload:
    name: Create release and upload artifacts
    needs:
      - build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: ls -alFR
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/linuxdeploy-plugin-qt*.AppImage*
